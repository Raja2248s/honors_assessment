pipeline {
    agent any

    tools {
        maven "maven"
    }

    environment {
        EC2_USER = 'ec2-user'
        EC2_HOST = 'ec2-54-183-202-197.us-west-1.compute.amazonaws.com'
        PEM_FILE_PATH = 'C:/Users/Acer/Downloads/devops.pem'
        JAR_NAME = 'honors_assesment-0.0.1-SNAPSHOT.jar'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/Raja2248s/honors_assessment.git'
            }
        }

        stage('Build') {
            steps {
                bat 'mvn clean install'
            }
            post {
                success {
                    archiveArtifacts 'target/*.jar'
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    def deployStartTime = System.currentTimeMillis()
                    echo "Starting deployment..."

                    // File transfer using SCP with verbose logs
                    def scpStartTime = System.currentTimeMillis()
                    echo "Initiating file transfer to EC2..."
                    sh "scp -v -i \"${PEM_FILE_PATH}\" target/${JAR_NAME} ${EC2_USER}@${EC2_HOST}:/home/ec2-user/ > scp_output.log 2>&1"
                    def scpEndTime = System.currentTimeMillis()
                    echo "File transfer completed in ${(scpEndTime - scpStartTime) / 1000} seconds"

                    // SSH and Application Startup
                    def sshStartTime = System.currentTimeMillis()
                    echo "Starting the application on EC2..."
                    sh "ssh -v -i \"${PEM_FILE_PATH}\" ${EC2_USER}@${EC2_HOST} 'nohup java -jar /home/ec2-user/${JAR_NAME} > /home/ec2-user/app.log 2>&1 &'"
                    def sshEndTime = System.currentTimeMillis()
                    echo "Application startup completed in ${(sshEndTime - sshStartTime) / 1000} seconds"

                    // Total deployment time
                    def deployEndTime = System.currentTimeMillis()
                    echo "Total deployment time: ${(deployEndTime - deployStartTime) / 1000} seconds"
                }
            }
        }
    }

    post {
        success {
            echo 'Deployment successful!'
        }
        failure {
            echo 'Build or deployment failed!'
        }
    }
}
